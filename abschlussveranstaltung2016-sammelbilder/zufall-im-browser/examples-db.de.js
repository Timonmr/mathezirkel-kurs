examples["01-sum"] = { description: "Summe der Augenzahlen bei zwei Würfeln", code: "#random\n\nx = roll()\ny = roll()\nsumme = x + y" };
examples["02-till6"] = { description: "Wie oft bis zur Sechs?", code: "#random\n\n# Bis wir etwas anderes sagen, ...\nwhile True:\n    # ... würfeln und würfeln wir immer wieder.\n    x = roll()\n\n    # Ist die Augenzahl eine Sechs?\n    if x == 6:\n        # Ja! Dann hören wir auf.\n        break" };
examples["03-triplets"] = { description: "Wie oft bis zum Dreier-Pasch?", code: "#random\n\nletzter, vorletzter, vorvorletzter = None, None, None\n\nwhile True:\n    vorvorletzter = vorletzter\n    vorletzter    = letzter\n    letzter       = roll()\n\n    if letzter == vorletzter and vorletzter == vorvorletzter:\n        break\n\n# Variablen zurücksetzen, damit sie nicht geplottet werden\nletzter, vorletzter, vorvorletzter = None, None, None" };
examples["04-coupon"] = { description: "Wie oft, bis man alle hat?", code: "#random\n\nseenNumbers = {}\n\n# Bis wir etwas anderes sagen, ...\nwhile True:\n    # ... würfeln und würfeln wir immer wieder\n    # und notieren die auftretenden Augenzahlen.\n    seenNumbers[roll()] = True\n\n    # Haben wir insgesamt sechs verschiedene Augenzahlen gesehen?\n    if len(seenNumbers) == 6:\n        # Ja! Dann hören wir auf.\n        break" };
examples["05-stake-doubling"] = { description: "Einsatzverdopplungsstrategie", code: "#random\n\nbalance = 100  # Startkapital\nstake   = 1\n\n# Solange wir noch nicht pleite und noch nicht zufrieden sind, ...\nwhile balance >= stake and balance < 120:\n    # ... werfen wir eine Münze.\n    coin = roll(sides=2)\n\n    # Wenn wir verlieren:\n    if coin == 1:\n        balance = balance - stake\n        stake   = 2 * stake\n    # Wenn wir gewinnen:\n    else:\n        balance = balance + stake\n        stake = 1\n\n# Variablen zurücksetzen, damit sie nicht geplottet werden.\ncoin, stake = None, None" };
examples["06-penneys-game"] = { description: "Penneys Spiel", code: "#random\n\n# Zwei Spielerinnen verkünden eine Folge\n# von drei oder mehr Münzergebnissen.\n# Dann wird wiederholt eine Münze geworfen.\n# Es gewinnt die Spielerin, deren Muster\n# das erste Mal auftritt.\n# \n# Details gibt's in einem der Numberphile-Videos:\n# https://www.youtube.com/watch?v=Sa9jLWKrX0c\n\npattern1 = \"110\"\npattern2 = \"011\"\n\ndigits = \"\"  # Protokoll der aufgetretenden Münzwürfe\n\nwhile True:\n    # Münze werfen\n    if roll(2) == 1:\n        digits = digits + \"0\"\n    else:\n        digits = digits + \"1\"\n\n    # Gewinnerin feststellen\n    if digits.endswith(pattern1):\n        winner = 1\n        break\n    elif digits.endswith(pattern2):\n        winner = 2\n        break" };
examples["07-runs"] = { description: "Runs in Münzwürfen", code: "#random\n\n# Dieser Code zählt die Anzahl Runs bei\n# wiederholten Münzwürfen. Etwa liegen bei\n# \"KKKZZZZZKK\" drei Runs vor.\n#\n# Die Anzahl Runs ist beim Run-Test wichtig.\n# Dieser ist ein einfacher statistischer Test,\n# der von einem gegebenem Wurfprotokoll versucht,\n# die Frage zu beantworten, ob es von einer echten\n# Münze stammt.\n\n# Ergebnis des vorherigen Münzwürfs\nlastRoll     = None\n\n# Anzahl Runs bisher\nnumberOfRuns = 0\n\nfor i in range(50):\n    # Wir werfen eine Münze ...\n    newRoll = roll(sides=2)\n\n    # ... und vergleichen das Ergebnis mit dem des\n    # letzten Wurfs. Wenn es anders als das vorherige\n    # ist, haben wir es mit einem neuen Run zu tun.\n    if newRoll != lastRoll:\n        lastRoll = newRoll\n        numberOfRuns = numberOfRuns + 1\n\n# Variablen zurücksetzen, damit sie nicht geplottet werden\nlastRoll = None\nnewRoll  = None" };
